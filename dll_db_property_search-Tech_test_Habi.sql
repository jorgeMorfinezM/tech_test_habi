-- MySQL Script generated by MySQL Workbench
-- lun 12 jul 2021 16:12:08
-- Model: New Model    Version: 1.0
-- Autor: Jorge Morfinez Mojica (jorge.morfinez.m@gmail.com)
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`property`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`property` ;

CREATE TABLE IF NOT EXISTS `mydb`.`property` (
  `id` INT NOT NULL COMMENT 'Identificador unico de la propiedad en la base de datos',
  `address` VARCHAR(45) NOT NULL COMMENT 'Domicilio de la propiedad',
  `city` VARCHAR(45) NULL COMMENT 'Ciudad donde se localiza la propiedad',
  `province` VARCHAR(45) NOT NULL COMMENT 'Estado de la Republica/Pais/Provincia donde se localiza la propiedad',
  `description` VARCHAR(45) NULL COMMENT 'Descripcion corta de la propiedad',
  `year_build` INT NOT NULL COMMENT 'Anio de construccion de la propiedad',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
COMMENT = 'Tabla de Propiedades';


-- -----------------------------------------------------
-- Table `mydb`.`status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`status` ;

CREATE TABLE IF NOT EXISTS `mydb`.`status` (
  `id` INT NOT NULL COMMENT 'Identifiicador unico del registro de estatus',
  `name_status` VARCHAR(45) NOT NULL COMMENT 'Nombre del estatus',
  `label_status` VARCHAR(45) NULL COMMENT 'Etiqueta o descripcion breve del estatus',
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`status_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`status_history` ;

CREATE TABLE IF NOT EXISTS `mydb`.`status_history` (
  `id` INT NOT NULL,
  `property_id` INT NOT NULL COMMENT 'Identificador de la propiedad para colocar estatus',
  `status_id` INT NOT NULL COMMENT 'Identificador del estatus',
  `update_date` DATE NOT NULL COMMENT 'Fecha de asignacion del ultimo estatus a la propiedad',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_property_history`
    FOREIGN KEY (`property_id`)
    REFERENCES `mydb`.`property` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_status_history`
    FOREIGN KEY (`status_id`)
    REFERENCES `mydb`.`status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `index2` ON `mydb`.`status_history` () VISIBLE;

CREATE INDEX `fk_property_history_idx` ON `mydb`.`status_history` (`property_id` ASC) VISIBLE;

CREATE INDEX `fk_status_history_idx` ON `mydb`.`status_history` (`status_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `mydb`.`auth_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`auth_user` ;

CREATE TABLE IF NOT EXISTS `mydb`.`auth_user` (
  `id_user` INT NOT NULL,
  `username` VARCHAR(45) NOT NULL COMMENT 'Usuario o nickname',
  `password` VARCHAR(256) NOT NULL COMMENT 'Contrasenia del usuario',
  `first_name` VARCHAR(45) NULL COMMENT 'Primer nombre del usuario',
  `last_name` VARCHAR(45) NULL COMMENT 'Ultimo nombre del usuario/apellido',
  `email` VARCHAR(45) NOT NULL COMMENT 'Correo electronico del usuario',
  `date_joined` DATE NOT NULL COMMENT 'Fecha de registro del usuario',
  `last_login` VARCHAR(45) NULL COMMENT 'Fecha del ultimo inicio de sesion del usuario',
  `is_active` TINYINT NOT NULL COMMENT 'Estatus del usuario: Activo o Inactivo',
  `is_staff` TINYINT NULL COMMENT 'Estatus del usuario en rol staff',
  `is_superuser` TINYINT NULL COMMENT 'Estatus del usuario en rol super usuario',
  PRIMARY KEY (`id_user`))
ENGINE = InnoDB
COMMENT = 'Contiene los datos de los usuarios autenticados para calificar/comentar en posts propiedades';


-- -----------------------------------------------------
-- Table `mydb`.`post`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`post` ;

CREATE TABLE IF NOT EXISTS `mydb`.`post` (
  `id_post` INT NOT NULL COMMENT 'Identificador unico del post del usuario',
  `like` TINYINT NULL,
  `comment_post` VARCHAR(100) NULL,
  PRIMARY KEY (`id_post`))
ENGINE = InnoDB
COMMENT = 'Registra los posts de los usuarios registrados en cada propiedad';


-- -----------------------------------------------------
-- Table `mydb`.`post_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`post_user` ;

CREATE TABLE IF NOT EXISTS `mydb`.`post_user` (
  `id` INT NOT NULL,
  `id_post` INT NOT NULL COMMENT 'Identificador de la tabla post',
  `id_user` INT NOT NULL COMMENT 'Identificador de la tabla usuarios',
  `id_property` INT NOT NULL COMMENT 'Identificador de la propiedad a la que se esta posteando',
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_post`
    FOREIGN KEY (`id_post`)
    REFERENCES `mydb`.`post` (`id_post`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user`
    FOREIGN KEY (`id_user`)
    REFERENCES `mydb`.`auth_user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_property`
    FOREIGN KEY (`id_property`)
    REFERENCES `mydb`.`property` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Reegistra y enlaza los posts por cada usuario de la base de datos registrado';

CREATE INDEX `fk_post_idx` ON `mydb`.`post_user` (`id_post` ASC) VISIBLE;

CREATE INDEX `fk_user_idx` ON `mydb`.`post_user` (`id_user` ASC) VISIBLE;

CREATE INDEX `fk_property_idx` ON `mydb`.`post_user` (`id_property` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
